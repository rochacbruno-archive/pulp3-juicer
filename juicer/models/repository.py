# coding: utf-8

"""
    Pulp3 API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: v3
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class Repository(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'href': 'str',
        'created': 'datetime',
        'versions_href': 'str',
        'latest_version_href': 'str',
        'name': 'str',
        'description': 'str'
    }

    attribute_map = {
        'href': '_href',
        'created': '_created',
        'versions_href': '_versions_href',
        'latest_version_href': '_latest_version_href',
        'name': 'name',
        'description': 'description'
    }

    def __init__(self, href=None, created=None, versions_href=None, latest_version_href=None, name=None, description=None):  # noqa: E501
        """Repository - a model defined in Swagger"""  # noqa: E501

        self._href = None
        self._created = None
        self._versions_href = None
        self._latest_version_href = None
        self._name = None
        self._description = None
        self.discriminator = None

        if href is not None:
            self.href = href
        if created is not None:
            self.created = created
        if versions_href is not None:
            self.versions_href = versions_href
        if latest_version_href is not None:
            self.latest_version_href = latest_version_href
        self.name = name
        if description is not None:
            self.description = description

    @property
    def href(self):
        """Gets the href of this Repository.  # noqa: E501


        :return: The href of this Repository.  # noqa: E501
        :rtype: str
        """
        return self._href

    @href.setter
    def href(self, href):
        """Sets the href of this Repository.


        :param href: The href of this Repository.  # noqa: E501
        :type: str
        """

        self._href = href

    @property
    def created(self):
        """Gets the created of this Repository.  # noqa: E501

        Timestamp of creation.  # noqa: E501

        :return: The created of this Repository.  # noqa: E501
        :rtype: datetime
        """
        return self._created

    @created.setter
    def created(self, created):
        """Sets the created of this Repository.

        Timestamp of creation.  # noqa: E501

        :param created: The created of this Repository.  # noqa: E501
        :type: datetime
        """

        self._created = created

    @property
    def versions_href(self):
        """Gets the versions_href of this Repository.  # noqa: E501


        :return: The versions_href of this Repository.  # noqa: E501
        :rtype: str
        """
        return self._versions_href

    @versions_href.setter
    def versions_href(self, versions_href):
        """Sets the versions_href of this Repository.


        :param versions_href: The versions_href of this Repository.  # noqa: E501
        :type: str
        """

        self._versions_href = versions_href

    @property
    def latest_version_href(self):
        """Gets the latest_version_href of this Repository.  # noqa: E501


        :return: The latest_version_href of this Repository.  # noqa: E501
        :rtype: str
        """
        return self._latest_version_href

    @latest_version_href.setter
    def latest_version_href(self, latest_version_href):
        """Sets the latest_version_href of this Repository.


        :param latest_version_href: The latest_version_href of this Repository.  # noqa: E501
        :type: str
        """

        self._latest_version_href = latest_version_href

    @property
    def name(self):
        """Gets the name of this Repository.  # noqa: E501

        A unique name for this repository.  # noqa: E501

        :return: The name of this Repository.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Repository.

        A unique name for this repository.  # noqa: E501

        :param name: The name of this Repository.  # noqa: E501
        :type: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501
        if name is not None and len(name) < 1:
            raise ValueError("Invalid value for `name`, length must be greater than or equal to `1`")  # noqa: E501

        self._name = name

    @property
    def description(self):
        """Gets the description of this Repository.  # noqa: E501

        An optional description.  # noqa: E501

        :return: The description of this Repository.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this Repository.

        An optional description.  # noqa: E501

        :param description: The description of this Repository.  # noqa: E501
        :type: str
        """

        self._description = description

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Repository):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
