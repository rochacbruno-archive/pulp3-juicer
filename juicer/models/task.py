# coding: utf-8

"""
    Pulp3 API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: v3
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from juicer.models.progress_report import ProgressReport  # noqa: F401,E501


class Task(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'href': 'str',
        'created': 'datetime',
        'job_id': 'str',
        'state': 'str',
        'name': 'str',
        'started_at': 'datetime',
        'finished_at': 'datetime',
        'non_fatal_errors': 'str',
        'error': 'str',
        'worker': 'str',
        'parent': 'str',
        'spawned_tasks': 'list[str]',
        'progress_reports': 'list[ProgressReport]',
        'created_resources': 'list[str]'
    }

    attribute_map = {
        'href': '_href',
        'created': '_created',
        'job_id': 'job_id',
        'state': 'state',
        'name': 'name',
        'started_at': 'started_at',
        'finished_at': 'finished_at',
        'non_fatal_errors': 'non_fatal_errors',
        'error': 'error',
        'worker': 'worker',
        'parent': 'parent',
        'spawned_tasks': 'spawned_tasks',
        'progress_reports': 'progress_reports',
        'created_resources': 'created_resources'
    }

    def __init__(self, href=None, created=None, job_id=None, state=None, name=None, started_at=None, finished_at=None, non_fatal_errors=None, error=None, worker=None, parent=None, spawned_tasks=None, progress_reports=None, created_resources=None):  # noqa: E501
        """Task - a model defined in Swagger"""  # noqa: E501

        self._href = None
        self._created = None
        self._job_id = None
        self._state = None
        self._name = None
        self._started_at = None
        self._finished_at = None
        self._non_fatal_errors = None
        self._error = None
        self._worker = None
        self._parent = None
        self._spawned_tasks = None
        self._progress_reports = None
        self._created_resources = None
        self.discriminator = None

        if href is not None:
            self.href = href
        if created is not None:
            self.created = created
        if job_id is not None:
            self.job_id = job_id
        if state is not None:
            self.state = state
        self.name = name
        if started_at is not None:
            self.started_at = started_at
        if finished_at is not None:
            self.finished_at = finished_at
        if non_fatal_errors is not None:
            self.non_fatal_errors = non_fatal_errors
        if error is not None:
            self.error = error
        if worker is not None:
            self.worker = worker
        if parent is not None:
            self.parent = parent
        if spawned_tasks is not None:
            self.spawned_tasks = spawned_tasks
        if progress_reports is not None:
            self.progress_reports = progress_reports
        if created_resources is not None:
            self.created_resources = created_resources

    @property
    def href(self):
        """Gets the href of this Task.  # noqa: E501


        :return: The href of this Task.  # noqa: E501
        :rtype: str
        """
        return self._href

    @href.setter
    def href(self, href):
        """Sets the href of this Task.


        :param href: The href of this Task.  # noqa: E501
        :type: str
        """

        self._href = href

    @property
    def created(self):
        """Gets the created of this Task.  # noqa: E501

        Timestamp of creation.  # noqa: E501

        :return: The created of this Task.  # noqa: E501
        :rtype: datetime
        """
        return self._created

    @created.setter
    def created(self, created):
        """Sets the created of this Task.

        Timestamp of creation.  # noqa: E501

        :param created: The created of this Task.  # noqa: E501
        :type: datetime
        """

        self._created = created

    @property
    def job_id(self):
        """Gets the job_id of this Task.  # noqa: E501

        ID of the job in rq.  # noqa: E501

        :return: The job_id of this Task.  # noqa: E501
        :rtype: str
        """
        return self._job_id

    @job_id.setter
    def job_id(self, job_id):
        """Sets the job_id of this Task.

        ID of the job in rq.  # noqa: E501

        :param job_id: The job_id of this Task.  # noqa: E501
        :type: str
        """

        self._job_id = job_id

    @property
    def state(self):
        """Gets the state of this Task.  # noqa: E501

        The current state of the task. The possible values include: 'waiting', 'skipped', 'running', 'completed', 'failed' and 'canceled'.  # noqa: E501

        :return: The state of this Task.  # noqa: E501
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this Task.

        The current state of the task. The possible values include: 'waiting', 'skipped', 'running', 'completed', 'failed' and 'canceled'.  # noqa: E501

        :param state: The state of this Task.  # noqa: E501
        :type: str
        """
        if state is not None and len(state) < 1:
            raise ValueError("Invalid value for `state`, length must be greater than or equal to `1`")  # noqa: E501

        self._state = state

    @property
    def name(self):
        """Gets the name of this Task.  # noqa: E501

        The name of task.  # noqa: E501

        :return: The name of this Task.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Task.

        The name of task.  # noqa: E501

        :param name: The name of this Task.  # noqa: E501
        :type: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501
        if name is not None and len(name) < 1:
            raise ValueError("Invalid value for `name`, length must be greater than or equal to `1`")  # noqa: E501

        self._name = name

    @property
    def started_at(self):
        """Gets the started_at of this Task.  # noqa: E501

        Timestamp of the when this task started execution.  # noqa: E501

        :return: The started_at of this Task.  # noqa: E501
        :rtype: datetime
        """
        return self._started_at

    @started_at.setter
    def started_at(self, started_at):
        """Sets the started_at of this Task.

        Timestamp of the when this task started execution.  # noqa: E501

        :param started_at: The started_at of this Task.  # noqa: E501
        :type: datetime
        """

        self._started_at = started_at

    @property
    def finished_at(self):
        """Gets the finished_at of this Task.  # noqa: E501

        Timestamp of the when this task stopped execution.  # noqa: E501

        :return: The finished_at of this Task.  # noqa: E501
        :rtype: datetime
        """
        return self._finished_at

    @finished_at.setter
    def finished_at(self, finished_at):
        """Sets the finished_at of this Task.

        Timestamp of the when this task stopped execution.  # noqa: E501

        :param finished_at: The finished_at of this Task.  # noqa: E501
        :type: datetime
        """

        self._finished_at = finished_at

    @property
    def non_fatal_errors(self):
        """Gets the non_fatal_errors of this Task.  # noqa: E501

        A JSON Object of non-fatal errors encountered during the execution of this task.  # noqa: E501

        :return: The non_fatal_errors of this Task.  # noqa: E501
        :rtype: str
        """
        return self._non_fatal_errors

    @non_fatal_errors.setter
    def non_fatal_errors(self, non_fatal_errors):
        """Sets the non_fatal_errors of this Task.

        A JSON Object of non-fatal errors encountered during the execution of this task.  # noqa: E501

        :param non_fatal_errors: The non_fatal_errors of this Task.  # noqa: E501
        :type: str
        """

        self._non_fatal_errors = non_fatal_errors

    @property
    def error(self):
        """Gets the error of this Task.  # noqa: E501

        A JSON Object of a fatal error encountered during the execution of this task.  # noqa: E501

        :return: The error of this Task.  # noqa: E501
        :rtype: str
        """
        return self._error

    @error.setter
    def error(self, error):
        """Sets the error of this Task.

        A JSON Object of a fatal error encountered during the execution of this task.  # noqa: E501

        :param error: The error of this Task.  # noqa: E501
        :type: str
        """

        self._error = error

    @property
    def worker(self):
        """Gets the worker of this Task.  # noqa: E501

        The worker associated with this task. This field is empty if a worker is not yet assigned.  # noqa: E501

        :return: The worker of this Task.  # noqa: E501
        :rtype: str
        """
        return self._worker

    @worker.setter
    def worker(self, worker):
        """Sets the worker of this Task.

        The worker associated with this task. This field is empty if a worker is not yet assigned.  # noqa: E501

        :param worker: The worker of this Task.  # noqa: E501
        :type: str
        """

        self._worker = worker

    @property
    def parent(self):
        """Gets the parent of this Task.  # noqa: E501

        The parent task that spawned this task.  # noqa: E501

        :return: The parent of this Task.  # noqa: E501
        :rtype: str
        """
        return self._parent

    @parent.setter
    def parent(self, parent):
        """Sets the parent of this Task.

        The parent task that spawned this task.  # noqa: E501

        :param parent: The parent of this Task.  # noqa: E501
        :type: str
        """

        self._parent = parent

    @property
    def spawned_tasks(self):
        """Gets the spawned_tasks of this Task.  # noqa: E501

        Any tasks spawned by this task.  # noqa: E501

        :return: The spawned_tasks of this Task.  # noqa: E501
        :rtype: list[str]
        """
        return self._spawned_tasks

    @spawned_tasks.setter
    def spawned_tasks(self, spawned_tasks):
        """Sets the spawned_tasks of this Task.

        Any tasks spawned by this task.  # noqa: E501

        :param spawned_tasks: The spawned_tasks of this Task.  # noqa: E501
        :type: list[str]
        """

        self._spawned_tasks = spawned_tasks

    @property
    def progress_reports(self):
        """Gets the progress_reports of this Task.  # noqa: E501


        :return: The progress_reports of this Task.  # noqa: E501
        :rtype: list[ProgressReport]
        """
        return self._progress_reports

    @progress_reports.setter
    def progress_reports(self, progress_reports):
        """Sets the progress_reports of this Task.


        :param progress_reports: The progress_reports of this Task.  # noqa: E501
        :type: list[ProgressReport]
        """

        self._progress_reports = progress_reports

    @property
    def created_resources(self):
        """Gets the created_resources of this Task.  # noqa: E501

        Resources created by this task.  # noqa: E501

        :return: The created_resources of this Task.  # noqa: E501
        :rtype: list[str]
        """
        return self._created_resources

    @created_resources.setter
    def created_resources(self, created_resources):
        """Sets the created_resources of this Task.

        Resources created by this task.  # noqa: E501

        :param created_resources: The created_resources of this Task.  # noqa: E501
        :type: list[str]
        """

        self._created_resources = created_resources

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Task):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
