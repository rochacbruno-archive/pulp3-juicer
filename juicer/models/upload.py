# coding: utf-8

"""
    Pulp3 API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: v3
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class Upload(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'href': 'str',
        'file': 'str',
        'offset': 'int',
        'expires_at': 'str'
    }

    attribute_map = {
        'href': '_href',
        'file': 'file',
        'offset': 'offset',
        'expires_at': 'expires_at'
    }

    def __init__(self, href=None, file=None, offset=None, expires_at=None):  # noqa: E501
        """Upload - a model defined in Swagger"""  # noqa: E501

        self._href = None
        self._file = None
        self._offset = None
        self._expires_at = None
        self.discriminator = None

        if href is not None:
            self.href = href
        if file is not None:
            self.file = file
        if offset is not None:
            self.offset = offset
        if expires_at is not None:
            self.expires_at = expires_at

    @property
    def href(self):
        """Gets the href of this Upload.  # noqa: E501


        :return: The href of this Upload.  # noqa: E501
        :rtype: str
        """
        return self._href

    @href.setter
    def href(self, href):
        """Sets the href of this Upload.


        :param href: The href of this Upload.  # noqa: E501
        :type: str
        """

        self._href = href

    @property
    def file(self):
        """Gets the file of this Upload.  # noqa: E501


        :return: The file of this Upload.  # noqa: E501
        :rtype: str
        """
        return self._file

    @file.setter
    def file(self, file):
        """Sets the file of this Upload.


        :param file: The file of this Upload.  # noqa: E501
        :type: str
        """

        self._file = file

    @property
    def offset(self):
        """Gets the offset of this Upload.  # noqa: E501


        :return: The offset of this Upload.  # noqa: E501
        :rtype: int
        """
        return self._offset

    @offset.setter
    def offset(self, offset):
        """Sets the offset of this Upload.


        :param offset: The offset of this Upload.  # noqa: E501
        :type: int
        """
        if offset is not None and offset > 9223372036854775807:  # noqa: E501
            raise ValueError("Invalid value for `offset`, must be a value less than or equal to `9223372036854775807`")  # noqa: E501
        if offset is not None and offset < -9223372036854775808:  # noqa: E501
            raise ValueError("Invalid value for `offset`, must be a value greater than or equal to `-9223372036854775808`")  # noqa: E501

        self._offset = offset

    @property
    def expires_at(self):
        """Gets the expires_at of this Upload.  # noqa: E501


        :return: The expires_at of this Upload.  # noqa: E501
        :rtype: str
        """
        return self._expires_at

    @expires_at.setter
    def expires_at(self, expires_at):
        """Sets the expires_at of this Upload.


        :param expires_at: The expires_at of this Upload.  # noqa: E501
        :type: str
        """

        self._expires_at = expires_at

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Upload):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
