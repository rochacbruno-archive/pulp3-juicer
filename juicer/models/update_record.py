# coding: utf-8

"""
    Pulp3 API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: v3

    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class UpdateRecord(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'href': 'str',
        'created': 'datetime',
        'type': 'str',
        'id': 'str',
        'updated_date': 'str',
        'description': 'str',
        'issued_date': 'str',
        'fromstr': 'str',
        'status': 'str',
        'title': 'str',
        'summary': 'str',
        'version': 'str',
        'type': 'str',
        'severity': 'str',
        'solution': 'str',
        'release': 'str',
        'rights': 'str',
        'pushcount': 'str'
    }

    attribute_map = {
        'href': '_href',
        'created': '_created',
        'type': '_type',
        'id': 'id',
        'updated_date': 'updated_date',
        'description': 'description',
        'issued_date': 'issued_date',
        'fromstr': 'fromstr',
        'status': 'status',
        'title': 'title',
        'summary': 'summary',
        'version': 'version',
        'type': 'type',
        'severity': 'severity',
        'solution': 'solution',
        'release': 'release',
        'rights': 'rights',
        'pushcount': 'pushcount'
    }

    def __init__(self, href=None, created=None, type=None, id=None, updated_date=None, description=None, issued_date=None, fromstr=None, status=None, title=None, summary=None, version=None, severity=None, solution=None, release=None, rights=None, pushcount=None):  # noqa: E501
        """UpdateRecord - a model defined in Swagger"""  # noqa: E501

        self._href = None
        self._created = None
        self._type = None
        self._id = None
        self._updated_date = None
        self._description = None
        self._issued_date = None
        self._fromstr = None
        self._status = None
        self._title = None
        self._summary = None
        self._version = None
        self._type = None
        self._severity = None
        self._solution = None
        self._release = None
        self._rights = None
        self._pushcount = None
        self.discriminator = None

        if href is not None:
            self.href = href
        if created is not None:
            self.created = created
        if type is not None:
            self.type = type
        self.id = id
        self.updated_date = updated_date
        self.description = description
        self.issued_date = issued_date
        self.fromstr = fromstr
        self.status = status
        self.title = title
        self.summary = summary
        self.version = version
        self.type = type
        self.severity = severity
        self.solution = solution
        self.release = release
        self.rights = rights
        self.pushcount = pushcount

    @property
    def href(self):
        """Gets the href of this UpdateRecord.  # noqa: E501


        :return: The href of this UpdateRecord.  # noqa: E501
        :rtype: str
        """
        return self._href

    @href.setter
    def href(self, href):
        """Sets the href of this UpdateRecord.


        :param href: The href of this UpdateRecord.  # noqa: E501
        :type: str
        """

        self._href = href

    @property
    def created(self):
        """Gets the created of this UpdateRecord.  # noqa: E501

        Timestamp of creation.  # noqa: E501

        :return: The created of this UpdateRecord.  # noqa: E501
        :rtype: datetime
        """
        return self._created

    @created.setter
    def created(self, created):
        """Sets the created of this UpdateRecord.

        Timestamp of creation.  # noqa: E501

        :param created: The created of this UpdateRecord.  # noqa: E501
        :type: datetime
        """

        self._created = created

    @property
    def type(self):
        """Gets the type of this UpdateRecord.  # noqa: E501


        :return: The type of this UpdateRecord.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this UpdateRecord.


        :param type: The type of this UpdateRecord.  # noqa: E501
        :type: str
        """
        if type is not None and len(type) < 1:
            raise ValueError("Invalid value for `type`, length must be greater than or equal to `1`")  # noqa: E501

        self._type = type

    @property
    def id(self):
        """Gets the id of this UpdateRecord.  # noqa: E501

        Update id (short update name, e.g. RHEA-2013:1777)  # noqa: E501

        :return: The id of this UpdateRecord.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this UpdateRecord.

        Update id (short update name, e.g. RHEA-2013:1777)  # noqa: E501

        :param id: The id of this UpdateRecord.  # noqa: E501
        :type: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501
        if id is not None and len(id) < 1:
            raise ValueError("Invalid value for `id`, length must be greater than or equal to `1`")  # noqa: E501

        self._id = id

    @property
    def updated_date(self):
        """Gets the updated_date of this UpdateRecord.  # noqa: E501

        Date when the update was updated (e.g. '2013-12-02 00:00:00')  # noqa: E501

        :return: The updated_date of this UpdateRecord.  # noqa: E501
        :rtype: str
        """
        return self._updated_date

    @updated_date.setter
    def updated_date(self, updated_date):
        """Sets the updated_date of this UpdateRecord.

        Date when the update was updated (e.g. '2013-12-02 00:00:00')  # noqa: E501

        :param updated_date: The updated_date of this UpdateRecord.  # noqa: E501
        :type: str
        """
        if updated_date is None:
            raise ValueError("Invalid value for `updated_date`, must not be `None`")  # noqa: E501
        if updated_date is not None and len(updated_date) < 1:
            raise ValueError("Invalid value for `updated_date`, length must be greater than or equal to `1`")  # noqa: E501

        self._updated_date = updated_date

    @property
    def description(self):
        """Gets the description of this UpdateRecord.  # noqa: E501

        Update description  # noqa: E501

        :return: The description of this UpdateRecord.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this UpdateRecord.

        Update description  # noqa: E501

        :param description: The description of this UpdateRecord.  # noqa: E501
        :type: str
        """
        if description is None:
            raise ValueError("Invalid value for `description`, must not be `None`")  # noqa: E501
        if description is not None and len(description) < 1:
            raise ValueError("Invalid value for `description`, length must be greater than or equal to `1`")  # noqa: E501

        self._description = description

    @property
    def issued_date(self):
        """Gets the issued_date of this UpdateRecord.  # noqa: E501

        Date when the update was issued (e.g. '2013-12-02 00:00:00')  # noqa: E501

        :return: The issued_date of this UpdateRecord.  # noqa: E501
        :rtype: str
        """
        return self._issued_date

    @issued_date.setter
    def issued_date(self, issued_date):
        """Sets the issued_date of this UpdateRecord.

        Date when the update was issued (e.g. '2013-12-02 00:00:00')  # noqa: E501

        :param issued_date: The issued_date of this UpdateRecord.  # noqa: E501
        :type: str
        """
        if issued_date is None:
            raise ValueError("Invalid value for `issued_date`, must not be `None`")  # noqa: E501
        if issued_date is not None and len(issued_date) < 1:
            raise ValueError("Invalid value for `issued_date`, length must be greater than or equal to `1`")  # noqa: E501

        self._issued_date = issued_date

    @property
    def fromstr(self):
        """Gets the fromstr of this UpdateRecord.  # noqa: E501

        Source of the update (e.g. security@redhat.com)  # noqa: E501

        :return: The fromstr of this UpdateRecord.  # noqa: E501
        :rtype: str
        """
        return self._fromstr

    @fromstr.setter
    def fromstr(self, fromstr):
        """Sets the fromstr of this UpdateRecord.

        Source of the update (e.g. security@redhat.com)  # noqa: E501

        :param fromstr: The fromstr of this UpdateRecord.  # noqa: E501
        :type: str
        """
        if fromstr is None:
            raise ValueError("Invalid value for `fromstr`, must not be `None`")  # noqa: E501
        if fromstr is not None and len(fromstr) < 1:
            raise ValueError("Invalid value for `fromstr`, length must be greater than or equal to `1`")  # noqa: E501

        self._fromstr = fromstr

    @property
    def status(self):
        """Gets the status of this UpdateRecord.  # noqa: E501

        Update status ('final', ...)  # noqa: E501

        :return: The status of this UpdateRecord.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this UpdateRecord.

        Update status ('final', ...)  # noqa: E501

        :param status: The status of this UpdateRecord.  # noqa: E501
        :type: str
        """
        if status is None:
            raise ValueError("Invalid value for `status`, must not be `None`")  # noqa: E501
        if status is not None and len(status) < 1:
            raise ValueError("Invalid value for `status`, length must be greater than or equal to `1`")  # noqa: E501

        self._status = status

    @property
    def title(self):
        """Gets the title of this UpdateRecord.  # noqa: E501

        Update name  # noqa: E501

        :return: The title of this UpdateRecord.  # noqa: E501
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this UpdateRecord.

        Update name  # noqa: E501

        :param title: The title of this UpdateRecord.  # noqa: E501
        :type: str
        """
        if title is None:
            raise ValueError("Invalid value for `title`, must not be `None`")  # noqa: E501
        if title is not None and len(title) < 1:
            raise ValueError("Invalid value for `title`, length must be greater than or equal to `1`")  # noqa: E501

        self._title = title

    @property
    def summary(self):
        """Gets the summary of this UpdateRecord.  # noqa: E501

        Short summary  # noqa: E501

        :return: The summary of this UpdateRecord.  # noqa: E501
        :rtype: str
        """
        return self._summary

    @summary.setter
    def summary(self, summary):
        """Sets the summary of this UpdateRecord.

        Short summary  # noqa: E501

        :param summary: The summary of this UpdateRecord.  # noqa: E501
        :type: str
        """
        if summary is None:
            raise ValueError("Invalid value for `summary`, must not be `None`")  # noqa: E501
        if summary is not None and len(summary) < 1:
            raise ValueError("Invalid value for `summary`, length must be greater than or equal to `1`")  # noqa: E501

        self._summary = summary

    @property
    def version(self):
        """Gets the version of this UpdateRecord.  # noqa: E501

        Update version (probably always an integer number)  # noqa: E501

        :return: The version of this UpdateRecord.  # noqa: E501
        :rtype: str
        """
        return self._version

    @version.setter
    def version(self, version):
        """Sets the version of this UpdateRecord.

        Update version (probably always an integer number)  # noqa: E501

        :param version: The version of this UpdateRecord.  # noqa: E501
        :type: str
        """
        if version is None:
            raise ValueError("Invalid value for `version`, must not be `None`")  # noqa: E501
        if version is not None and len(version) < 1:
            raise ValueError("Invalid value for `version`, length must be greater than or equal to `1`")  # noqa: E501

        self._version = version

    @property
    def type(self):
        """Gets the type of this UpdateRecord.  # noqa: E501

        Update type ('enhancement', 'bugfix', ...)  # noqa: E501

        :return: The type of this UpdateRecord.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this UpdateRecord.

        Update type ('enhancement', 'bugfix', ...)  # noqa: E501

        :param type: The type of this UpdateRecord.  # noqa: E501
        :type: str
        """
        if type is None:
            raise ValueError("Invalid value for `type`, must not be `None`")  # noqa: E501
        if type is not None and len(type) < 1:
            raise ValueError("Invalid value for `type`, length must be greater than or equal to `1`")  # noqa: E501

        self._type = type

    @property
    def severity(self):
        """Gets the severity of this UpdateRecord.  # noqa: E501

        Severity  # noqa: E501

        :return: The severity of this UpdateRecord.  # noqa: E501
        :rtype: str
        """
        return self._severity

    @severity.setter
    def severity(self, severity):
        """Sets the severity of this UpdateRecord.

        Severity  # noqa: E501

        :param severity: The severity of this UpdateRecord.  # noqa: E501
        :type: str
        """
        if severity is None:
            raise ValueError("Invalid value for `severity`, must not be `None`")  # noqa: E501
        if severity is not None and len(severity) < 1:
            raise ValueError("Invalid value for `severity`, length must be greater than or equal to `1`")  # noqa: E501

        self._severity = severity

    @property
    def solution(self):
        """Gets the solution of this UpdateRecord.  # noqa: E501

        Solution  # noqa: E501

        :return: The solution of this UpdateRecord.  # noqa: E501
        :rtype: str
        """
        return self._solution

    @solution.setter
    def solution(self, solution):
        """Sets the solution of this UpdateRecord.

        Solution  # noqa: E501

        :param solution: The solution of this UpdateRecord.  # noqa: E501
        :type: str
        """
        if solution is None:
            raise ValueError("Invalid value for `solution`, must not be `None`")  # noqa: E501
        if solution is not None and len(solution) < 1:
            raise ValueError("Invalid value for `solution`, length must be greater than or equal to `1`")  # noqa: E501

        self._solution = solution

    @property
    def release(self):
        """Gets the release of this UpdateRecord.  # noqa: E501

        Update release  # noqa: E501

        :return: The release of this UpdateRecord.  # noqa: E501
        :rtype: str
        """
        return self._release

    @release.setter
    def release(self, release):
        """Sets the release of this UpdateRecord.

        Update release  # noqa: E501

        :param release: The release of this UpdateRecord.  # noqa: E501
        :type: str
        """
        if release is None:
            raise ValueError("Invalid value for `release`, must not be `None`")  # noqa: E501
        if release is not None and len(release) < 1:
            raise ValueError("Invalid value for `release`, length must be greater than or equal to `1`")  # noqa: E501

        self._release = release

    @property
    def rights(self):
        """Gets the rights of this UpdateRecord.  # noqa: E501

        Copyrights  # noqa: E501

        :return: The rights of this UpdateRecord.  # noqa: E501
        :rtype: str
        """
        return self._rights

    @rights.setter
    def rights(self, rights):
        """Sets the rights of this UpdateRecord.

        Copyrights  # noqa: E501

        :param rights: The rights of this UpdateRecord.  # noqa: E501
        :type: str
        """
        if rights is None:
            raise ValueError("Invalid value for `rights`, must not be `None`")  # noqa: E501
        if rights is not None and len(rights) < 1:
            raise ValueError("Invalid value for `rights`, length must be greater than or equal to `1`")  # noqa: E501

        self._rights = rights

    @property
    def pushcount(self):
        """Gets the pushcount of this UpdateRecord.  # noqa: E501

        Push count  # noqa: E501

        :return: The pushcount of this UpdateRecord.  # noqa: E501
        :rtype: str
        """
        return self._pushcount

    @pushcount.setter
    def pushcount(self, pushcount):
        """Sets the pushcount of this UpdateRecord.

        Push count  # noqa: E501

        :param pushcount: The pushcount of this UpdateRecord.  # noqa: E501
        :type: str
        """
        if pushcount is None:
            raise ValueError("Invalid value for `pushcount`, must not be `None`")  # noqa: E501
        if pushcount is not None and len(pushcount) < 1:
            raise ValueError("Invalid value for `pushcount`, length must be greater than or equal to `1`")  # noqa: E501

        self._pushcount = pushcount

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, UpdateRecord):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
