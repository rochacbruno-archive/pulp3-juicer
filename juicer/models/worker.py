# coding: utf-8

"""
    Pulp3 API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: v3
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class Worker(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'created': 'datetime',
        'href': 'str',
        'name': 'str',
        'last_heartbeat': 'datetime',
        'online': 'bool',
        'missing': 'bool'
    }

    attribute_map = {
        'created': '_created',
        'href': '_href',
        'name': 'name',
        'last_heartbeat': 'last_heartbeat',
        'online': 'online',
        'missing': 'missing'
    }

    def __init__(self, created=None, href=None, name=None, last_heartbeat=None, online=None, missing=None):  # noqa: E501
        """Worker - a model defined in Swagger"""  # noqa: E501

        self._created = None
        self._href = None
        self._name = None
        self._last_heartbeat = None
        self._online = None
        self._missing = None
        self.discriminator = None

        if created is not None:
            self.created = created
        if href is not None:
            self.href = href
        if name is not None:
            self.name = name
        if last_heartbeat is not None:
            self.last_heartbeat = last_heartbeat
        if online is not None:
            self.online = online
        if missing is not None:
            self.missing = missing

    @property
    def created(self):
        """Gets the created of this Worker.  # noqa: E501

        Timestamp of creation.  # noqa: E501

        :return: The created of this Worker.  # noqa: E501
        :rtype: datetime
        """
        return self._created

    @created.setter
    def created(self, created):
        """Sets the created of this Worker.

        Timestamp of creation.  # noqa: E501

        :param created: The created of this Worker.  # noqa: E501
        :type: datetime
        """

        self._created = created

    @property
    def href(self):
        """Gets the href of this Worker.  # noqa: E501


        :return: The href of this Worker.  # noqa: E501
        :rtype: str
        """
        return self._href

    @href.setter
    def href(self, href):
        """Sets the href of this Worker.


        :param href: The href of this Worker.  # noqa: E501
        :type: str
        """

        self._href = href

    @property
    def name(self):
        """Gets the name of this Worker.  # noqa: E501

        The name of the worker.  # noqa: E501

        :return: The name of this Worker.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Worker.

        The name of the worker.  # noqa: E501

        :param name: The name of this Worker.  # noqa: E501
        :type: str
        """
        if name is not None and len(name) < 1:
            raise ValueError("Invalid value for `name`, length must be greater than or equal to `1`")  # noqa: E501

        self._name = name

    @property
    def last_heartbeat(self):
        """Gets the last_heartbeat of this Worker.  # noqa: E501

        Timestamp of the last time the worker talked to the service.  # noqa: E501

        :return: The last_heartbeat of this Worker.  # noqa: E501
        :rtype: datetime
        """
        return self._last_heartbeat

    @last_heartbeat.setter
    def last_heartbeat(self, last_heartbeat):
        """Sets the last_heartbeat of this Worker.

        Timestamp of the last time the worker talked to the service.  # noqa: E501

        :param last_heartbeat: The last_heartbeat of this Worker.  # noqa: E501
        :type: datetime
        """

        self._last_heartbeat = last_heartbeat

    @property
    def online(self):
        """Gets the online of this Worker.  # noqa: E501

        True if the worker is considered online, otherwise False  # noqa: E501

        :return: The online of this Worker.  # noqa: E501
        :rtype: bool
        """
        return self._online

    @online.setter
    def online(self, online):
        """Sets the online of this Worker.

        True if the worker is considered online, otherwise False  # noqa: E501

        :param online: The online of this Worker.  # noqa: E501
        :type: bool
        """

        self._online = online

    @property
    def missing(self):
        """Gets the missing of this Worker.  # noqa: E501

        True if the worker is considerd missing, otherwise False  # noqa: E501

        :return: The missing of this Worker.  # noqa: E501
        :rtype: bool
        """
        return self._missing

    @missing.setter
    def missing(self, missing):
        """Sets the missing of this Worker.

        True if the worker is considerd missing, otherwise False  # noqa: E501

        :param missing: The missing of this Worker.  # noqa: E501
        :type: bool
        """

        self._missing = missing

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Worker):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
