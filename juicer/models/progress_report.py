# coding: utf-8

"""
    Pulp3 API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: v3
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class ProgressReport(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'message': 'str',
        'state': 'str',
        'total': 'int',
        'done': 'int',
        'suffix': 'str',
        'task': 'str'
    }

    attribute_map = {
        'message': 'message',
        'state': 'state',
        'total': 'total',
        'done': 'done',
        'suffix': 'suffix',
        'task': 'task'
    }

    def __init__(self, message=None, state=None, total=None, done=None, suffix=None, task=None):  # noqa: E501
        """ProgressReport - a model defined in Swagger"""  # noqa: E501

        self._message = None
        self._state = None
        self._total = None
        self._done = None
        self._suffix = None
        self._task = None
        self.discriminator = None

        if message is not None:
            self.message = message
        if state is not None:
            self.state = state
        if total is not None:
            self.total = total
        if done is not None:
            self.done = done
        if suffix is not None:
            self.suffix = suffix
        if task is not None:
            self.task = task

    @property
    def message(self):
        """Gets the message of this ProgressReport.  # noqa: E501

        The message shown to the user for the progress report.  # noqa: E501

        :return: The message of this ProgressReport.  # noqa: E501
        :rtype: str
        """
        return self._message

    @message.setter
    def message(self, message):
        """Sets the message of this ProgressReport.

        The message shown to the user for the progress report.  # noqa: E501

        :param message: The message of this ProgressReport.  # noqa: E501
        :type: str
        """
        if message is not None and len(message) < 1:
            raise ValueError("Invalid value for `message`, length must be greater than or equal to `1`")  # noqa: E501

        self._message = message

    @property
    def state(self):
        """Gets the state of this ProgressReport.  # noqa: E501

        The current state of the progress report. The possible values are: 'waiting', 'skipped', 'running', 'completed', 'failed' and 'canceled'. The default is 'waiting'.  # noqa: E501

        :return: The state of this ProgressReport.  # noqa: E501
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this ProgressReport.

        The current state of the progress report. The possible values are: 'waiting', 'skipped', 'running', 'completed', 'failed' and 'canceled'. The default is 'waiting'.  # noqa: E501

        :param state: The state of this ProgressReport.  # noqa: E501
        :type: str
        """
        if state is not None and len(state) < 1:
            raise ValueError("Invalid value for `state`, length must be greater than or equal to `1`")  # noqa: E501

        self._state = state

    @property
    def total(self):
        """Gets the total of this ProgressReport.  # noqa: E501

        The total count of items to be handled by the ProgressBar.  # noqa: E501

        :return: The total of this ProgressReport.  # noqa: E501
        :rtype: int
        """
        return self._total

    @total.setter
    def total(self, total):
        """Sets the total of this ProgressReport.

        The total count of items to be handled by the ProgressBar.  # noqa: E501

        :param total: The total of this ProgressReport.  # noqa: E501
        :type: int
        """

        self._total = total

    @property
    def done(self):
        """Gets the done of this ProgressReport.  # noqa: E501

        The count of items already processed. Defaults to 0.  # noqa: E501

        :return: The done of this ProgressReport.  # noqa: E501
        :rtype: int
        """
        return self._done

    @done.setter
    def done(self, done):
        """Sets the done of this ProgressReport.

        The count of items already processed. Defaults to 0.  # noqa: E501

        :param done: The done of this ProgressReport.  # noqa: E501
        :type: int
        """

        self._done = done

    @property
    def suffix(self):
        """Gets the suffix of this ProgressReport.  # noqa: E501

        The suffix to be shown with the progress report.  # noqa: E501

        :return: The suffix of this ProgressReport.  # noqa: E501
        :rtype: str
        """
        return self._suffix

    @suffix.setter
    def suffix(self, suffix):
        """Sets the suffix of this ProgressReport.

        The suffix to be shown with the progress report.  # noqa: E501

        :param suffix: The suffix of this ProgressReport.  # noqa: E501
        :type: str
        """

        self._suffix = suffix

    @property
    def task(self):
        """Gets the task of this ProgressReport.  # noqa: E501

        The task associated with this progress report.  # noqa: E501

        :return: The task of this ProgressReport.  # noqa: E501
        :rtype: str
        """
        return self._task

    @task.setter
    def task(self, task):
        """Sets the task of this ProgressReport.

        The task associated with this progress report.  # noqa: E501

        :param task: The task of this ProgressReport.  # noqa: E501
        :type: str
        """

        self._task = task

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ProgressReport):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
